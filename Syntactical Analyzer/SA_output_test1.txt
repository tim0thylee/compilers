Token: SEPARATOR  Lexeme: %%
<Rat21SU> -> %% <Opt Declaration List> <Statement List> %% 
Token: KEYWORD  Lexeme: integer
<Opt Declaration List> -> <Declaration List>
<Declaration List> -> <Declaration>; <Declaration List Prime>
<Declaration> -> <Qualifier> <identifier>
<Qualifier> -> integer
Token: IDENTIFIER  Lexeme: i
<identifier> -> i
Token: SEPARATOR  Lexeme: ;
Token: KEYWORD  Lexeme: boolean
<Declaration List Prime> -> <Declaration List>
<Declaration List> -> <Declaration>; <Declaration List Prime>
<Declaration> -> <Qualifier> <identifier>
<Qualifier> -> boolean
Token: IDENTIFIER  Lexeme: isTrue
<identifier> -> isTrue
Token: SEPARATOR  Lexeme: ;
Token: KEYWORD  Lexeme: integer
<Declaration List Prime> -> <Declaration List>
<Declaration List> -> <Declaration>; <Declaration List Prime>
<Declaration> -> <Qualifier> <identifier>
<Qualifier> -> integer
Token: IDENTIFIER  Lexeme: sum
<identifier> -> sum
Token: SEPARATOR  Lexeme: ;
Token: KEYWORD  Lexeme: if
<Declaration List Prime> -> ε
<Opt Declaration List> -> <Empty>
<Empty> -> ε
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <If>
<If> -> if(<Condition>)<Statement><IfPrime>endif
Token: SEPARATOR  Lexeme: (
Token: IDENTIFIER  Lexeme: b
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | ( <Expression> ) | true | false
<identifier> -> b
Token: OPERATOR  Lexeme: <
<Term Prime> -> <Factor> <Term Prime>
<Term Prime> -> ε
<Expression> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | ε
<Expression Prime> -> ε
<Relop> -> <Relop> 
<Relop> -> <
Token: IDENTIFIER  Lexeme: d
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | ( <Expression> ) | true | false
<identifier> -> d
Token: SEPARATOR  Lexeme: )
<Term Prime> -> <Factor> <Term Prime>
<Term Prime> -> ε
<Expression> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | ε
<Expression Prime> -> ε
Token: KEYWORD  Lexeme: put
<Statement> -> <Put>
<Put> -> put(<identifier>);
Token: SEPARATOR  Lexeme: (
Token: IDENTIFIER  Lexeme: b
<identifier> -> b
Token: SEPARATOR  Lexeme: )
Token: SEPARATOR  Lexeme: ;
Token: KEYWORD  Lexeme: endif
<IfPrime> -> ε
Token: IDENTIFIER  Lexeme: i
<Statement List Prime> -> <Statement List>
<Statement List> -> <Statement> <Statement List Prime>
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
Token: OPERATOR  Lexeme: =
Token: INTEGER  Lexeme: 5
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> - <Primary> | <Primary>
<Primary> -> <Identifier> | <Integer> | ( <Expression> ) | true | false
<integer> -> 5
Token: SEPARATOR  Lexeme: ;
<Term Prime> -> <Factor> <Term Prime>
<Term Prime> -> ε
<Expression> -> + <Term> <Expression Prime> | - <Term> <Expression Prime> | ε
<Expression Prime> -> ε
Token: SEPARATOR  Lexeme: %%
<Statement List Prime> -> ε
<Rat21SU> end
